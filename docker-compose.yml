version: '3.8'

# Production Docker Compose configuration for LLMMux
# This includes MySQL database, authentication, and example OpenAI-compatible inference servers

services:
  # MySQL Database for authentication and user management
  mysql:
    image: mysql:8.0
    container_name: llmmux-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-llmmux_root_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-llmmux}
      MYSQL_USER: ${MYSQL_USER:-llmmux_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-llmmux_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-llmmux_root_password}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - llmmux-network

  # LLMMux - Main application with authentication
  llmmux:
    image: llmmux:latest
    container_name: llmmux-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      # Application Configuration
      - NODE_ENV=production
      - PORT=8080
      
      # Database Configuration
      - DATABASE_URL=mysql://${MYSQL_USER:-llmmux_user}:${MYSQL_PASSWORD:-llmmux_password}@mysql:3306/${MYSQL_DATABASE:-llmmux}
      - DATABASE_HOST=mysql
      
      # JWT Authentication
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      
      # API Keys for backward compatibility (legacy auth)
      - API_KEYS=${API_KEYS:-sk-your-secret-key-1,sk-your-secret-key-2}
      
      # Backend Configuration
      # Option 1: Manual backend configuration
      - BACKENDS=${BACKENDS:-microsoft-DialoGPT-medium:inference-server-1:8000,gpt2:inference-server-2:8000}
      
      # Option 2: Auto-discovery (recommended)
      - INFERENCE_SERVERS=${INFERENCE_SERVERS:-inference-server-1:8000,inference-server-2:8000}
      
      # CORS Configuration
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      
      # Health Check Configuration
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      inference-server-1:
        condition: service_healthy
      inference-server-2:
        condition: service_healthy
    networks:
      - llmmux-network

  # Example Inference Server 1 - Microsoft DialoGPT (using vLLM engine)
  inference-server-1:
    image: vllm/vllm-openai:latest
    container_name: llmmux-inference-1
    ports:
      - "8000:8000"
    command: [
      "--model", "microsoft/DialoGPT-medium",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--max-model-len", "1024",
      "--dtype", "float16"
    ]
    environment:
      - CUDA_VISIBLE_DEVICES=0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/models"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    networks:
      - llmmux-network

  # Example Inference Server 2 - GPT-2 (using vLLM engine)
  inference-server-2:
    image: vllm/vllm-openai:latest
    container_name: llmmux-inference-2
    ports:
      - "8001:8000"
    command: [
      "--model", "gpt2",
      "--host", "0.0.0.0",
      "--port", "8000",
      "--max-model-len", "1024",
      "--dtype", "float16"
    ]
    environment:
      - CUDA_VISIBLE_DEVICES=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/models"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    restart: unless-stopped
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    networks:
      - llmmux-network

  # Optional: Redis for caching and session management
  # redis:
  #   image: redis:7-alpine
  #   container_name: llmmux-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3
  #   restart: unless-stopped
  #   networks:
  #     - llmmux-network

  # Optional: Nginx reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: llmmux-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - llmmux
  #   restart: unless-stopped
  #   networks:
  #     - llmmux-network

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mysql
  # redis_data:
  #   driver: local

networks:
  llmmux-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
